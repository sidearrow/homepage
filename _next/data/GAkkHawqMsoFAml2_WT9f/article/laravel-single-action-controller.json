{"pageProps":{"id":"laravel-single-action-controller","title":"Laravel Single Action Controller のすすめ","description":null,"html":"<p>こちらの話題については様々な記事等で既出ではありますが、個人的に好きな方法のため書かせていただきました。</p>\n<h2 id=\"single-action-controller-とは\">Single Action Controller とは</h2>\n<p>一つのアクションのみが定義された Controller クラスを指す。\n<code>artisan</code> コマンドで Controller を作成する際に、オプション <code>--invokable</code> を付与する。</p>\n<pre><code class=\"language-sh\">$ php artisan make:controller &lt;name&gt; --invokable</code></pre>\n<p>Controller クラス内には <code>__invoke()</code> メソッドが定義されており、こちらのメソッドで Request オブジェクトを受け取り、 Response オブジェクトを返却する。\n<code>__invoke()</code> メソッドは PHP のマジックメソッドで、オブジェクトを関数として呼び出した際に実行される。</p>\n<p><strong>（参考）</strong></p>\n<ul>\n<li><a href=\"https://laravel.com/docs/8.x/controllers#single-action-controllers\">https://laravel.com/docs/8.x/controllers#single-action-controllers</a></li>\n<li><a href=\"https://www.php.net/manual/ja/language.oop5.magic.php#object.invoke\">https://www.php.net/manual/ja/language.oop5.magic.php#object.invoke</a></li>\n</ul>\n<h2 id=\"single-action-controller-のメリット・デメリット\">Single Action Controller のメリット・デメリット</h2>\n<h3 id=\"メリット\">メリット</h3>\n<h4 id=\"一つの-controller-クラス内に存在するアクションが減り、見通しが良くなる\">一つの Controller クラス内に存在するアクションが減り、見通しが良くなる</h4>\n<p>Fat, Skinny Controller の話題について、個人的には各アクション内の処理も対象かと思いますので、Controller が Fat になるのを避けるには、アクション内の実装にも気をつけたいところです。</p>\n<h4 id=\"router-に登録する際の記述が簡潔\">Router に登録する際の記述が簡潔</h4>\n<p>引数のアクション部分に Controller クラスの完全修飾名を <code>:class</code> を使用して指定すればよい。\nSingle Action Controller でない場合の記述では、メソッド名を間違えていもそのルートにアクセスしない限りエラーにならないので、そちらが回避できるのも Single Action Controller のメリットでしょうか。</p>\n<pre><code class=\"language-php\"><span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">App</span>\\<span class=\"hljs-title\">Http</span>\\<span class=\"hljs-title\">Controllers</span>\\<span class=\"hljs-title\">HogeController</span>;\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">App</span>\\<span class=\"hljs-title\">Http</span>\\<span class=\"hljs-title\">Controllers</span>\\<span class=\"hljs-title\">FugaController</span>;\n\n<span class=\"hljs-comment\"># Single Action Controller</span>\nRoute::get(<span class=\"hljs-string\">'/hoge'</span>, HogeController::class);\n\n<span class=\"hljs-comment\"># Not Single Action Controller</span>\nRoute::get(<span class=\"hljs-string\">'/fuga'</span>, [FugaController::class, <span class=\"hljs-string\">'index'</span>]);</code></pre>\n<h3 id=\"デメリット\">デメリット</h3>\n<h4 id=\"resource-controller-が使用できない\">Resource Controller が使用できない</h4>\n<p>要件にあった場合、Resource Controller を利用すると圧倒的に記述量を減らすことが可能です。そのような場合、Resource Controller と併用することを検討したいです。</p>\n<p><strong>（参考）</strong></p>\n<ul>\n<li><a href=\"https://laravel.com/docs/8.x/controllers#resource-controllers\">https://laravel.com/docs/8.x/controllers#resource-controllers</a></li>\n</ul>\n"},"__N_SSG":true}